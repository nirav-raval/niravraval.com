<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JavaScript on Nirav Raval</title>
    <link>https://niravraval.com/tags/javascript/</link>
    <description>Recent content in JavaScript on Nirav Raval</description>
    <image>
      <title>Nirav Raval</title>
      <url>https://niravraval.com/assets/Images/Nirav_about.jpg</url>
      <link>https://niravraval.com/assets/Images/Nirav_about.jpg</link>
    </image>
    <generator>Hugo -- 0.139.2</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 29 Nov 2024 11:30:03 +0000</lastBuildDate>
    <atom:link href="https://niravraval.com/tags/javascript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>forEach vs for Loops for Async Operations in JavaScript</title>
      <link>https://niravraval.com/blog/2024/november/foreach-vs-for-loops-for-async-operations-in-javascript/</link>
      <pubDate>Fri, 29 Nov 2024 11:30:03 +0000</pubDate>
      <guid>https://niravraval.com/blog/2024/november/foreach-vs-for-loops-for-async-operations-in-javascript/</guid>
      <description>&lt;p&gt;Well, today I learnt an important lesson. ðŸ¤”&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;
&lt;p&gt;In a recent coding effort, I found myself faced with the classic choice between JavaScript&amp;rsquo;s forEach and for&amp;hellip; loops. As I was iterating through an array of data, I realized that my code required asynchronous operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Async/Await in forEach&lt;/strong&gt;: Initially, I opted for the simplicity of forEach, but soon hit a roadblock. Despite my attempts to use async/await within the loop, I encountered unexpected behaviour. The asynchronous nature of forEach proved to be a block which led to unhandled promises and unpredictable results. Here&amp;rsquo;s what I was using:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
