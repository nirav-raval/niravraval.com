<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AsyncAwait on Nirav Raval</title>
    <link>http://localhost:1313/tags/asyncawait/</link>
    <description>Recent content in AsyncAwait on Nirav Raval</description>
    <image>
      <title>Nirav Raval</title>
      <url>https://niravraval.com/Images/Nirav_about.jpg</url>
      <link>https://niravraval.com/Images/Nirav_about.jpg</link>
    </image>
    <generator>Hugo -- 0.139.2</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 Nov 2024 17:52:41 -0500</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/asyncawait/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>forEach vs for Loops for Async Operations in JavaScript</title>
      <link>http://localhost:1313/blog/2024/november/foreach-vs-for-loops-for-async-operations-in-javascript/</link>
      <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/november/foreach-vs-for-loops-for-async-operations-in-javascript/</guid>
      <description>&lt;p&gt;Well, today I learnt an important lesson. ðŸ¤”&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;
&lt;p&gt;In a recent coding effort, I found myself faced with the classic choice between JavaScript&amp;rsquo;s forEach and for&amp;hellip; loops. As I was iterating through an array of data, I realized that my code required asynchronous operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Async/Await in forEach&lt;/strong&gt;: Initially, I opted for the simplicity of forEach, but soon hit a roadblock. Despite my attempts to use async/await within the loop, I encountered unexpected behaviour. The asynchronous nature of forEach proved to be a block which led to unhandled promises and unpredictable results. Here&amp;rsquo;s what I was using:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Well, today I learnt an important lesson. ðŸ¤”</p>
<h1 id="the-problem">The Problem</h1>
<p>In a recent coding effort, I found myself faced with the classic choice between JavaScript&rsquo;s forEach and for&hellip; loops. As I was iterating through an array of data, I realized that my code required asynchronous operations.</p>
<p><strong>Async/Await in forEach</strong>: Initially, I opted for the simplicity of forEach, but soon hit a roadblock. Despite my attempts to use async/await within the loop, I encountered unexpected behaviour. The asynchronous nature of forEach proved to be a block which led to unhandled promises and unpredictable results. Here&rsquo;s what I was using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// Using forEach (causes issues with async/await)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">dataArray</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">async</span> (<span style="color:#a6e22e">item</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">processItem</span>(<span style="color:#a6e22e">item</span>); <span style="color:#75715e">// This won&#39;t behave as expected
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>});
</span></span></code></pre></div><h1 id="the-solution">The solution</h1>
<p>The solution is simple. Use for loop not <strong>foreach</strong> (of course when doing asynchronous operations).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// Using for loop (structured and reliable)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">item</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">dataArray</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">processItem</span>(<span style="color:#a6e22e">item</span>); <span style="color:#75715e">// Awaits completion before moving to the next item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>No rocket science right? Now, why did I choose for loop? ðŸŽ¬ the answer is simple, I found relief in its structured approach to asynchronous iteration. With async/await, each loop iteration awaited the completion of asynchronous tasks.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
