<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Blogs on Nirav Raval</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content in Blogs on Nirav Raval</description>
    <image>
      <title>Nirav Raval</title>
      <url>https://niravraval.com/Images/Nirav_about.jpg</url>
      <link>https://niravraval.com/Images/Nirav_about.jpg</link>
    </image>
    <generator>Hugo -- 0.139.2</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jan 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Create a Custom Declarative Agent with Breaking Bad API</title>
      <link>http://localhost:1313/blog/2025/january/create-a-custom-declarative-agent-with-breaking-bad-api/</link>
      <pubDate>Mon, 06 Jan 2025 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2025/january/create-a-custom-declarative-agent-with-breaking-bad-api/</guid>
      <description>&lt;p&gt;Back inÂ November 2024, Microsoft introduced newÂ &lt;a href=&#34;https://techcommunity.microsoft.com/blog/microsoft365copilotblog/introducing-new-agents-in-microsoft-365/4296918?utm_source=chatgpt.com&#34;&gt;AI-powered agents&lt;/a&gt;Â in Microsoft 365 Copilot.Â Â &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/overview-declarative-agent&#34;&gt;Declarative agents&lt;/a&gt;Â in Microsoft 365 Copilot are a type of AI assistant that helps businesses automate tasks and workflows by following predefined instructions and using enterprise data. They work within tools like Teams, Word, and PowerPoint to boost productivity. For example, a customer service agent can provide real-time order updates using an API plugin, to improve support quality.Â &lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Back inÂ November 2024, Microsoft introduced newÂ <a href="https://techcommunity.microsoft.com/blog/microsoft365copilotblog/introducing-new-agents-in-microsoft-365/4296918?utm_source=chatgpt.com">AI-powered agents</a>Â in Microsoft 365 Copilot.Â Â </p>
<p><a href="https://learn.microsoft.com/en-us/microsoft-365-copilot/extensibility/overview-declarative-agent">Declarative agents</a>Â in Microsoft 365 Copilot are a type of AI assistant that helps businesses automate tasks and workflows by following predefined instructions and using enterprise data. They work within tools like Teams, Word, and PowerPoint to boost productivity. For example, a customer service agent can provide real-time order updates using an API plugin, to improve support quality.Â </p>
<p>Today, we will create a <strong>custom declarative agent</strong> using an open-source API to demonstrate how agents can interact with external data sources.</p>
<p><strong>Open Source API Overview:</strong></p>
<p>We&rsquo;ll be using theÂ <a href="https://breakingbadquotes.xyz/">Breaking Bad API</a>, an open-source API that provides quotes from the popular TV seriesÂ Breaking Bad. The API response will return a quote along with the author&rsquo;s name (character name) from the series.</p>
<p>ðŸ‘‡<strong>Sample Response from API</strong> ðŸ‘‡</p>
<p><img alt="Custom Agent- CA1" loading="lazy" src="/Images/blog_images/2025/January/CA-1.png"></p>
<p>Letâ€™s get started!</p>
<h2 id="step-1-creating-a-custom-declarative-agent-using-microsoft-toolkit-extension">Step 1: Creating a Custom Declarative Agent Using Microsoft Toolkit Extension</h2>
<p>Let&rsquo;s begin by creating a custom declarative agent using the <a href="https://learn.microsoft.com/en-us/microsoftteams/platform/toolkit/install-teams-toolkit?tabs=vscode">Microsoft Toolkit extension</a>. Follow these step-by-step instructions to set up your agent:Â </p>
<ol>
<li><strong>Launch the Microsoft Toolkit Extension</strong> and click on <em><code>Create a New App</code></em> under <strong>Create a Project or Explore Samples</strong></li>
<li>Choose <strong>Agent</strong> as your app type</li>
<li>Select <strong>Declarative Agent</strong> to build an agent powered by Microsoft 365 Copilot</li>
<li>Click <strong>Add Plugin</strong> to connect external APIs to your agent</li>
<li>Choose <strong>Start with a New API</strong> to set up a fresh connection for your agent</li>
<li>Pick <strong>None</strong> for authentication since the Breaking Bad API doesnâ€™t require it</li>
<li>Opt for <strong>TypeScript</strong> as programming language for a smoother experience</li>
<li>Select a folder to store project files (pro tip: avoid saving it in the C drive for better organization)</li>
<li>Finally, give your agent a name like <strong>BreakingBad Agent</strong> and hit the setup button</li>
</ol>
<p>Wohooo!Â ðŸŽ‰Â You&rsquo;ve Successfully Created Your Declarative Agent with an API Plugin! After completing the setup, a new window will pop up inÂ VS CodeÂ with your project structure ready. But waitâ€”there&rsquo;s more!Â </p>
<p>By default, the project folder includes a demo API plugin. However, this plugin uses a local json file as its data source. Since we want to fetch real-time data from an actual API, we will need to remove the existing demo setup.</p>
<p><strong>Clean Up the Default Files</strong></p>
<p>Now that your declarative agent is set up, it&rsquo;s time to remove the default files that use local data. Since we will be working with a live API instead, delete the following files from your project directory:Â </p>
<ul>
<li>
<p>appPackage &gt; apiSpecificationfile &gt; <code>repair.yml</code>Â </p>
</li>
<li>
<p>appPackage &gt; <code>repairDeclarativeAgent.json</code>Â </p>
</li>
<li>
<p>src &gt; <code>RepairsData.json</code>Â </p>
</li>
<li>
<p>src &gt; functions &gt; <code>repairs.ts</code></p>
</li>
</ul>
<p><img alt="Custom Agent- CA2" loading="lazy" src="/Images/blog_images/2025/January/CA-2.png"></p>
<blockquote>
<p>Donâ€™t worry about the files we just deleted. Weâ€™re going to create the essential files needed for ourÂ Breaking Bad AgentÂ from scratch. Up next, weâ€™ll fetch real-time data directly from the API and configure the agent to use it.</p>
</blockquote>
<h2 id="step-2-create-a-new-function-file-for-the-breaking-bad-api-integration">Step 2: Create a New Function File for the Breaking Bad API Integration</h2>
<p>Next, we need to create a new file where our agent will interact with theÂ Breaking Bad API.Â </p>
<ol>
<li>Navigate to:Â src &gt; functions</li>
<li>Create a New File:Â Name itÂ <code>quotes.ts</code></li>
</ol>
<p>Now, copy and paste the following code intoÂ <code>quotes.ts</code>. This function will act as anÂ Azure FunctionÂ responsible for sending requests and receiving quotes from the live Breaking Bad API.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ts" data-lang="ts"><span style="display:flex;"><span><span style="color:#66d9ef">import</span>Â {Â <span style="color:#a6e22e">app</span>,Â <span style="color:#a6e22e">HttpResponseInit</span>Â }Â <span style="color:#66d9ef">from</span>Â <span style="color:#e6db74">&#34;@azure/functions&#34;</span>;Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">export</span>Â <span style="color:#66d9ef">async</span>Â <span style="color:#66d9ef">function</span>Â <span style="color:#a6e22e">quotes</span>()<span style="color:#f92672">:</span>Â <span style="color:#a6e22e">Promise</span>&lt;<span style="color:#f92672">HttpResponseInit</span>&gt; {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#66d9ef">const</span>Â <span style="color:#a6e22e">breakingbadResponse</span>Â <span style="color:#f92672">=</span>Â <span style="color:#66d9ef">await</span>Â <span style="color:#a6e22e">fetch</span>(<span style="color:#e6db74">&#39;https://api.breakingbadquotes.xyz/v1/quotes&#39;</span>);Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#66d9ef">const</span>Â <span style="color:#a6e22e">breakingbadData</span>Â <span style="color:#f92672">=</span>Â <span style="color:#66d9ef">await</span>Â <span style="color:#a6e22e">breakingbadResponse</span>.<span style="color:#a6e22e">json</span>();Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#66d9ef">return</span>Â {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#a6e22e">status</span>:Â <span style="color:#66d9ef">200</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#a6e22e">jsonBody</span><span style="color:#f92672">:</span>Â {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#a6e22e">quotes</span>:Â <span style="color:#66d9ef">breakingbadData</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ },Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ };Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">http</span>(<span style="color:#e6db74">&#34;quotes&#34;</span>, {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#a6e22e">methods</span><span style="color:#f92672">:</span>Â [<span style="color:#e6db74">&#34;GET&#34;</span>],Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#a6e22e">authLevel</span><span style="color:#f92672">:</span>Â <span style="color:#e6db74">&#34;anonymous&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#a6e22e">handler</span>:Â <span style="color:#66d9ef">quotes</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><blockquote>
<p>If you encounter the error <code>Cannot find module '@azure/functions' or its corresponding type</code>, donâ€™t worry! This is a common issue, and the required modules will be automatically installed when you run the agent for the first time.</p>
</blockquote>
<h2 id="step-3-create-the-api-specification-file">Step 3: Create the API Specification File</h2>
<p>Now, let&rsquo;s create the API specification file that will define how the declarative agent interacts with theÂ Breaking Bad API.</p>
<ol>
<li>Navigate to:Â appPackage &gt; apiSpecificationfile</li>
<li>Create a New File:Â Name itÂ <code>quotes.yml</code></li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yml" data-lang="yml"><span style="display:flex;"><span><span style="color:#ae81ff">openapi:Â 3.0.0Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">info:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#ae81ff">title:Â Breaking bad Quote APIÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#ae81ff">description:Â Random Quote api from the Breaking Bad TV series with authorÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#ae81ff">version:Â 1.0.0Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">servers:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ -Â <span style="color:#ae81ff">url:Â ${{OPENAPI_SERVER_URL}}/apiÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#ae81ff">description:Â The quotes api serverÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">paths:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#ae81ff">/quotes:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#ae81ff">get:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#ae81ff">operationId:Â getQuotesÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#ae81ff">summary:Â get all breaking bad quotes with authorÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#ae81ff">description:Â Returns a single random quote from the Breaking Bad TV series with authorÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#ae81ff">responses:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯Â <span style="color:#e6db74">&#39;200&#39;</span>:Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">description:Â A random quote from the Breaking Bad TV series with authorÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">content:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">application/json:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">schema:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">type:Â objectÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">properties:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">results:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">type:Â arrayÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">items:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">type:Â objectÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">properties:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">quote:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">type:Â stringÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">description:Â Breaking bad quote with authorÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">author:Â </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">type:Â stringÂ </span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#ae81ff">description:Â The author name of the quote</span>
</span></span></code></pre></div><h2 id="step-4-update-theai-pluginjsonfile">Step 4: Update theÂ ai-plugin.jsonÂ File</h2>
<p>Now, let&rsquo;s update the ai-plugin.json file so that the declarative agent is properly linked with the Breaking Bad API and the Azure Function.Â </p>
<ol>
<li>Navigate to:Â appPackage.Â </li>
<li>Open the File: OpenÂ <code>ai-plugin.json</code></li>
<li>Remove:Â The <code>&quot;Static_template&quot;</code> entry</li>
<li>Update:Â The runtimes URL and the function name as shown below:</li>
</ol>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;$schema&#34;</span>:Â <span style="color:#e6db74">&#34;[https://developer.microsoft.com/json-schemas/copilot/plugin/v2.2/schema.json](https://developer.microsoft.com/json-schemas/copilot/plugin/v2.2/schema.json)&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;schema_version&#34;</span>:Â <span style="color:#e6db74">&#34;v2.2&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;namespace&#34;</span>:Â <span style="color:#e6db74">&#34;Breakingbadquotes&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;name_for_human&#34;</span>:Â <span style="color:#e6db74">&#34;Breakingbadquotes Plugin&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;description_for_human&#34;</span>:Â <span style="color:#e6db74">&#34;Generate random quotes from the Breaking Bad TV series.&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;description_for_model&#34;</span>:Â <span style="color:#e6db74">&#34;Plugin for generating random quotes from the Breaking Bad TV series.&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;functions&#34;</span>: [Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;name&#34;</span>:Â <span style="color:#e6db74">&#34;getQuotes&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;description&#34;</span>:Â <span style="color:#e6db74">&#34;Returns a random quote with author from the Breaking Bad TV series.&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;capabilities&#34;</span>: {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;response_semantics&#34;</span>: {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;data_path&#34;</span>:Â <span style="color:#e6db74">&#34;$.quotes&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;properties&#34;</span>: {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;title&#34;</span>:Â <span style="color:#e6db74">&#34;$.quote&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;subtitle&#34;</span>:Â <span style="color:#e6db74">&#34;$.author&#34;</span>Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ }Â Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ }Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ }Â Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ } â€¯ â€¯Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ ],Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;runtimes&#34;</span>: [Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;type&#34;</span>:Â <span style="color:#e6db74">&#34;OpenApi&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;auth&#34;</span>: {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;type&#34;</span>:Â <span style="color:#e6db74">&#34;None&#34;</span>Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ },Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;spec&#34;</span>: {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;url&#34;</span>:Â <span style="color:#e6db74">&#34;apiSpecificationFile/quotes.yml&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;progress_style&#34;</span>:Â <span style="color:#e6db74">&#34;ShowUsageWithInputAndOutput&#34;</span>Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ },Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;run_for_functions&#34;</span>: [<span style="color:#e6db74">&#34;getQuotes&#34;</span>]Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ }Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ ],Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯Â <span style="color:#f92672">&#34;capabilities&#34;</span>: {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;conversation_starters&#34;</span>: []Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ }Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="step-5-update-the-manifestjson-file">Step 5: Update the manifest.json File</h2>
<p>The manifest.json file serves as the app manifest for your declarative agent. It is specifying the agentâ€™s identity and the declarative agent configuration files. We&rsquo;ll update it to reflect the Breaking Bad agent setup.</p>
<ol>
<li>Navigate to:Â appPackage</li>
<li>Open the File:Â openÂ <code>manifest.json</code></li>
<li>Update:Â The <code>&quot;copilotAgents&quot;</code> section as shown below:</li>
</ol>
<blockquote>
<p>You can also update the icon of your application in the same file. First, download any image and make sure it&rsquo;s <strong>192x192 pixels</strong>. Replace the existing icon with your new image by saving it as <strong>color.png</strong> in your project folder. If you choose to change the name of the image, make sure to update it in the application <strong>manifest.json</strong> file.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â  <span style="color:#f92672">&#34;copilotAgents&#34;</span>: {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â Â Â  <span style="color:#f92672">&#34;declarativeAgents&#34;</span>: [Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â Â Â Â Â  {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â Â Â Â Â Â Â  <span style="color:#f92672">&#34;id&#34;</span>: <span style="color:#e6db74">&#34;breakingBadDeclarativeAgent&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â Â Â Â Â Â Â  <span style="color:#f92672">&#34;file&#34;</span>: <span style="color:#e6db74">&#34;breakingBadDeclarativeAgent.json&#34;</span>Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â Â Â Â Â  }Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â Â Â  ]Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Â  }Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="step-6-create-the-quotesdeclarativeagentjson-file">Step 6: Create the quotesDeclarativeAgent.json File</h2>
<p>We need to create theÂ agent manifest fileÂ which defines how the declarative agent behaves and interacts with the Breaking Bad API.</p>
<ol>
<li>Navigate to:Â appPackage</li>
<li>Create a New File:Â Name itÂ <code>quotesDeclarativeAgent.json</code></li>
</ol>
<p><strong>Add the Following Content:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;$schema&#34;</span>:Â <span style="color:#e6db74">&#34;[https://developer.microsoft.com/json-schemas/copilot/declarative-agent/v1.2/schema.json](https://developer.microsoft.com/json-schemas/copilot/declarative-agent/v1.2/schema.json)&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;version&#34;</span>:Â <span style="color:#e6db74">&#34;v1.2&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;name&#34;</span>:Â <span style="color:#e6db74">&#34;Breaking badquotes&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;description&#34;</span>:Â <span style="color:#e6db74">&#34;This declarative agent helps you get a random quote from the Breaking Bad TV series.&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;instructions&#34;</span>:Â <span style="color:#e6db74">&#34;$[file(&#39;instruction.txt&#39;)]&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;conversation_starters&#34;</span>: [Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;text&#34;</span>:Â <span style="color:#e6db74">&#34;Give me a random quote from Breaking Bad with author name?&#34;</span>Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ } â€¯Â Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ ],Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯Â <span style="color:#f92672">&#34;actions&#34;</span>: [Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ {Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;id&#34;</span>:Â <span style="color:#e6db74">&#34;quoteplugin&#34;</span>,Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ â€¯ â€¯Â <span style="color:#f92672">&#34;file&#34;</span>:Â <span style="color:#e6db74">&#34;ai-plugin.json&#34;</span>Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ â€¯ â€¯ }Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>â€¯ â€¯ ]Â 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="step-7-update-the-instructionstxt-file">Step 7: Update the instructions.txt File</h2>
<p>The <code>instructions.txt</code> file plays a crucial role in declarative agent setup. It defines how the agent should behave, respond to user queries, and interact with the Breaking Bad API. This make sures that the agent stays focused on its purpose and maintains a consistent user experience.</p>
<p><strong>Update it with the Following Content:</strong></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-txt" data-lang="txt"><span style="display:flex;"><span>You are an assistant specialized in retrieving quotes from the provided API, ensuring a smooth and delightful user experience. Your responses should include the quote and its author.Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Guidelines:Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- Exclusive API Use: Do not perform web searches; rely solely on the provided API for data retrieval. Do not proceess any other request. This is solely for breaking bad quotes nothing else, keep in mind!Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- Response Format: Present the quote followed by the author&#39;s name.Â Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- Error Handling: If the API does not return a quote, respond with: &#34;I&#39;m sorry, I couldn&#39;t retrieve a quote at this moment.&#34;Â 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>- User Interaction: Maintain a friendly and engaging tone to ensure a delightful user experience.
</span></span></code></pre></div><h2 id="showcase-the-final-outcome-of-all-efforts">Showcase: The Final Outcome of All Efforts</h2>
<p>To run and debug your declarative agent, click on theÂ <code>Run and Debug</code>Â icon inÂ VS Code, which can be found on the left sidebar. The process will take approximatelyÂ <strong>~10-15 minutes</strong>Â to initialize. During this time, a sign-in prompt will appear where youâ€™ll need to log in with yourÂ Microsoft 365 accountÂ credentials.</p>
<p><img alt="Custom Agent- CA3" loading="lazy" src="/Images/blog_images/2025/January/CA-3.png"></p>
<blockquote>
<p>Once signed in, if you are not automatically redirected, you can manually visitÂ <a href="https://office.com/chat?auth=2">office.com/chat?auth=2</a>Â to access the Copilot interface.</p>
</blockquote>
<p>Select the prompt we defined earlier, and it will prompt you to process the query. Click on <code>Always Allow</code> to proceed.</p>
<p><img alt="Custom Agent- CA4" loading="lazy" src="/Images/blog_images/2025/January/CA-4.png"></p>
<p><strong>Final Output:</strong></p>
<p><img alt="Custom Agent- CA5" loading="lazy" src="/Images/blog_images/2025/January/CA-5.png"></p>
<p><strong>How to Verify if It&rsquo;s Working and Fetching Data from the API</strong></p>
<ul>
<li><strong>Verify via Localhost:</strong> Open the terminal in <strong>VS Code</strong> and click on <strong>Start Backend</strong>. Once it&rsquo;s running, you&rsquo;ll see the <strong>local host URL</strong>, which should begin with <code>localhost:7071/api/quotes</code>. Open this URL in your browser, and it will return a JSON response with the quote data.</li>
<li><strong>Verify via Agent Request:</strong> Another way to check is by sending a request from the agent. This will invoke the <code>getQuote</code> function, which generates a unique ID each time. The response will include text indicating that the function was programmatically called.</li>
</ul>
<h2 id="bonus-how-does-the-breaking-bad-quotes-agent-work">Bonus: How does the breaking bad quotes agent work?</h2>
<p>When a user requests a Breaking Bad quote in Microsoft 365 Copilot, the agent works in a few simple steps:Â </p>
<ol>
<li>Manifest Check:Â The agent starts by checking its task list in theÂ manifest file</li>
<li>API Connection:Â It then refers to theÂ API specificationÂ to understand how to connect to the Breaking Bad API</li>
<li>Data Fetch:Â The agent sends a request to anÂ Azure Function, which fetches a random quote and the authorâ€™s name from the API</li>
<li>Data Return:Â The quote and author are returned in a structured JSON format</li>
<li>User Display:Â Finally, the agent displays the quote clearly in the Copilot interface</li>
</ol>
<h2 id="conclusion">Conclusion</h2>
<p>Itâ€™s been a bit of a ride, hasnâ€™t it? But hey, weâ€™ve finally done it! We have successfully created a declarative agent using the Breaking Bad API, but the process can be applied to any <strong>API</strong>, including those requiring <strong>authentication</strong> with API key or OAuth.</p>
<p>if you hit any bumps along the way, donâ€™t hesitate to drop a comment below. If you found this helpful, give it a thumbs up or click on your favorite emoji button below. Good luck, and happy coding!</p>
<p><strong>Appendix</strong></p>
<p>This post is inspired by the following resources:</p>
<ul>
<li><a href="https://techcommunity.microsoft.com/blog/microsoft365copilotblog/introducing-new-agents-in-microsoft-365/4296918?utm_source=chatgpt.com">Introducing New Agents in Microsoft 365</a></li>
<li><a href="https://microsoft.github.io/TechExcel-Extending-Copilot-for-Microsoft365/">Extending Copilot for Microsoft 365</a></li>
<li><a href="https://www.voitanos.io/workshop-microsoft-365-copilot-build-declarative-agents/">Workshop on Building Declarative Agents for Microsoft 365 Copilot</a></li>
<li><a href="https://breakingbadquotes.xyz/">Breaking Bad Quotes API</a></li>
<li><a href="https://icons8.com/icon/21732/breaking-bad/">Breaking Bad Icon by Icons8</a></li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>How to Use PowerShell Start-Job for Background Tasks</title>
      <link>http://localhost:1313/blog/2024/december/how-to-use-powershell-start-job-for-background-tasks/</link>
      <pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/december/how-to-use-powershell-start-job-for-background-tasks/</guid>
      <description>&lt;p&gt;PowerShell is one of my favorite tool when it comes to automation. It has lot of functionalities and one of its cool features is &lt;code&gt;Start-Job&lt;/code&gt;. This will let you run tasks in the background while you keep using PowerShell for other things.&lt;/p&gt;
&lt;h2 id=&#34;start-job-is-ideal-to-use-when-&#34;&gt;Start-Job is ideal to use when &amp;hellip;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tasks take a long time to complete&lt;/li&gt;
&lt;li&gt;You want to avoid module conflicts by isolating them in separate jobs&lt;/li&gt;
&lt;li&gt;You need to resolve assembly conflicts by running jobs in isolated processes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-use-start-job&#34;&gt;How to Use &lt;code&gt;Start-Job&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;I will try to explain this with a simple example below.&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>PowerShell is one of my favorite tool when it comes to automation. It has lot of functionalities and one of its cool features is <code>Start-Job</code>. This will let you run tasks in the background while you keep using PowerShell for other things.</p>
<h2 id="start-job-is-ideal-to-use-when-">Start-Job is ideal to use when &hellip;</h2>
<ul>
<li>Tasks take a long time to complete</li>
<li>You want to avoid module conflicts by isolating them in separate jobs</li>
<li>You need to resolve assembly conflicts by running jobs in isolated processes</li>
</ul>
<h2 id="how-to-use-start-job">How to Use <code>Start-Job</code></h2>
<p>I will try to explain this with a simple example below.</p>
<h3 id="example--displaying-the-date-and-time-using-get-date">Example : Displaying the Date and Time using Get-Date</h3>
<p>Below example shows how to run a background job in PowerShell to get the current date and time. It uses <code>Start-Job</code> to begin the job, waits for it with <code>Wait-Job</code>, gets the result using <code>Receive-Job</code>, and cleans up with <code>Remove-Job</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ps" data-lang="ps"><span style="display:flex;"><span><span style="color:#a6e22e">#</span> <span style="color:#a6e22e">Start</span> <span style="color:#a6e22e">a</span> <span style="color:#a6e22e">background</span> <span style="color:#a6e22e">job</span> <span style="color:#a6e22e">to</span> <span style="color:#a6e22e">display</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">current</span> <span style="color:#a6e22e">date</span> <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">time</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">$job</span> <span style="color:#a6e22e">=</span> <span style="color:#a6e22e">Start-Job</span> <span style="color:#a6e22e">-ScriptBlock</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">Get-Date</span> 
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">#</span> <span style="color:#a6e22e">Check</span> <span style="color:#a6e22e">if</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">job</span> <span style="color:#a6e22e">is</span> <span style="color:#a6e22e">complete</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Write-Output</span> <span style="color:#a6e22e">&#34;Job</span> <span style="color:#a6e22e">ID:</span> <span style="color:#a6e22e">$</span><span style="color:#e6db74">($job.Id)</span> <span style="color:#a6e22e">started.&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Wait-Job</span> <span style="color:#a6e22e">-Job</span> <span style="color:#a6e22e">$job</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">#</span> <span style="color:#a6e22e">Get</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">result</span> <span style="color:#a6e22e">of</span> <span style="color:#a6e22e">the</span> <span style="color:#a6e22e">job</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">$jobResult</span> <span style="color:#a6e22e">=</span> <span style="color:#a6e22e">Receive-Job</span> <span style="color:#a6e22e">-Job</span> <span style="color:#a6e22e">$job</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Write-Output</span> <span style="color:#a6e22e">&#34;The</span> <span style="color:#a6e22e">current</span> <span style="color:#a6e22e">date</span> <span style="color:#a6e22e">and</span> <span style="color:#a6e22e">time</span> <span style="color:#a6e22e">is:</span> <span style="color:#a6e22e">$jobResult&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">#</span> <span style="color:#a6e22e">Clean</span> <span style="color:#a6e22e">up</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">Remove-Job</span> <span style="color:#a6e22e">-Job</span> <span style="color:#a6e22e">$job</span>
</span></span></code></pre></div><h2 id="output">Output</h2>
<p><img alt="PS_Start_Job" loading="lazy" src="/Images/blog_images/PS_Start_Job.jpg"></p>
<p>Itâ€™s quite simple, isnâ€™t it? Just make sure to use <code>Remove-Job</code> to clean up after your job is done. If you skip this step, it can lead to duplication or conflicts with other jobs.</p>
<h3 id="why-i-recommend-to-use-jobs">Why I recommend to use Jobs?</h3>
<p>Numerous reasons but, the major reason is that some PowerShell modules can <a href="https://github.com/pnp/powershell/issues/3637">conflict</a> when loaded together in the same session. For example, Microsoft Graph and PnP PowerShell might have overlapping dependencies. Running these modules or assemblies in separate jobs make sures that they operate independently without issues.</p>
<p>Try it out and let me know how you use it in your own scripts!</p>
<hr>
]]></content:encoded>
    </item>
    <item>
      <title>forEach vs for Loops for Async Operations in JavaScript</title>
      <link>http://localhost:1313/blog/2024/november/foreach-vs-for-loops-for-async-operations-in-javascript/</link>
      <pubDate>Fri, 29 Nov 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/blog/2024/november/foreach-vs-for-loops-for-async-operations-in-javascript/</guid>
      <description>&lt;p&gt;Well, today I learnt an important lesson. ðŸ¤”&lt;/p&gt;
&lt;h1 id=&#34;the-problem&#34;&gt;The Problem&lt;/h1&gt;
&lt;p&gt;In a recent coding effort, I found myself faced with the classic choice between JavaScript&amp;rsquo;s forEach and for&amp;hellip; loops. As I was iterating through an array of data, I realized that my code required asynchronous operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Async/Await in forEach&lt;/strong&gt;: Initially, I opted for the simplicity of forEach, but soon hit a roadblock. Despite my attempts to use async/await within the loop, I encountered unexpected behaviour. The asynchronous nature of forEach proved to be a block which led to unhandled promises and unpredictable results. Here&amp;rsquo;s what I was using:&lt;/p&gt;</description>
      <content:encoded><![CDATA[<p>Well, today I learnt an important lesson. ðŸ¤”</p>
<h1 id="the-problem">The Problem</h1>
<p>In a recent coding effort, I found myself faced with the classic choice between JavaScript&rsquo;s forEach and for&hellip; loops. As I was iterating through an array of data, I realized that my code required asynchronous operations.</p>
<p><strong>Async/Await in forEach</strong>: Initially, I opted for the simplicity of forEach, but soon hit a roadblock. Despite my attempts to use async/await within the loop, I encountered unexpected behaviour. The asynchronous nature of forEach proved to be a block which led to unhandled promises and unpredictable results. Here&rsquo;s what I was using:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// Using forEach (causes issues with async/await)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">dataArray</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#66d9ef">async</span> (<span style="color:#a6e22e">item</span>) =&gt; {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">processItem</span>(<span style="color:#a6e22e">item</span>); <span style="color:#75715e">// This won&#39;t behave as expected
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>});
</span></span></code></pre></div><h1 id="the-solution">The solution</h1>
<p>The solution is simple. Use for loop not <strong>foreach</strong> (of course when doing asynchronous operations).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#75715e">// Using for loop (structured and reliable)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">const</span> <span style="color:#a6e22e">item</span> <span style="color:#66d9ef">of</span> <span style="color:#a6e22e">dataArray</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">processItem</span>(<span style="color:#a6e22e">item</span>); <span style="color:#75715e">// Awaits completion before moving to the next item
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><p>No rocket science right? Now, why did I choose for loop? ðŸŽ¬ the answer is simple, I found relief in its structured approach to asynchronous iteration. With async/await, each loop iteration awaited the completion of asynchronous tasks.</p>
]]></content:encoded>
    </item>
  </channel>
</rss>
